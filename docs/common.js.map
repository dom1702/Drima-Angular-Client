{"version":3,"sources":["webpack:///./src/app/shared/common/services/countries.service.ts","webpack:///./src/app/shared/common/services/languages.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Country {\r\n    name: string;\r\n    code: string;\r\n    phone_code: string;\r\n  }\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CountriesService {\r\n\r\n    protected readonly baseUrl: string = 'assets/';\r\n    protected readonly filename: string = 'countries.json';\r\n    protected data : Country[] = null;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.loadData().subscribe(result => \r\n            { \r\n                this.data = result; \r\n            });\r\n      }\r\n\r\n    public getCountries(): Country[] {\r\n        return this.data;\r\n      }\r\n\r\n    public getCode(n : string): string\r\n    {\r\n        const index = this.data.find( ({name}) => name === n);\r\n        return index.code;\r\n    }\r\n\r\n    public getName(c : string): string\r\n    {\r\n        return this.data.find( ({code}) => code === c).name;\r\n    }\r\n    \r\n      public loadData(): Observable<Country[]> {\r\n\r\n        if(this.data != null)\r\n        {\r\n            const observable = new Observable<Country[]>(observer => {\r\n                observer.next(this.data);\r\n            });\r\n\r\n            return observable;\r\n        }\r\n\r\n        return this.http.get<Country[]>(this.baseUrl + this.filename);\r\n      }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface Language {\r\n    name: string;\r\n    code: string;\r\n    nativeName: string;\r\n  }\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LanguagesService {\r\n\r\n    protected readonly baseUrl: string = 'assets/';\r\n    protected readonly filename: string = 'languages.json';\r\n    protected data : Language[] = null;\r\n\r\n    constructor(private http: HttpClient) {\r\n        this.loadData().subscribe(result => \r\n            { \r\n                this.data = result; \r\n            });\r\n      }\r\n\r\n    public getCode(name : string): string\r\n    {\r\n        for(var i = 0; i < this.data.length; i++)\r\n        {\r\n            if(this.data[i].name == name)\r\n                return this.data[i].code;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    public getName(code : string): string\r\n    {\r\n        for(var i = 0; i < this.data.length; i++)\r\n        {\r\n            if(this.data[i].code == code)\r\n                return this.data[i].name;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    \r\n      public loadData(): Observable<Language[]> {\r\n\r\n        if(this.data != null)\r\n        {\r\n            const observable = new Observable<Language[]>(observer => {\r\n                observer.next(this.data);\r\n            });\r\n\r\n            return observable;\r\n        }\r\n\r\n        return this.http.get<Language[]>(this.baseUrl + this.filename);\r\n      }\r\n}"],"sourceRoot":""}